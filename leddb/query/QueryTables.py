#!/usr/bin/env python
################################################################################
#    Created by Oscar Martinez                                                 #
#    martinez@astro.rug.nl                                                     #
################################################################################
from ledama.leddb.Naming import *
from ledama.leddb.query.QueryTable import QueryTable
from ledama.utils import TARGET_F_EOR, TARGET_E_EOR

# This module contains the several queryable tables of the LEDDB, 
# i.e. to be used for the different tabs in the web and the different command-line getters
# so whenever we want to query data from the LEDDB we must use this objects (except in updaters) 

# Format methods used in PSQL
def formatDouble(double):
    return "to_char(" + double + ",'FM999999D999')"
def formatTimeStamp(timestamp):
    return "to_char(to_timestamp(" + timestamp+"),'YYYY/MM/DD/HH:mi:ss')"

#
# LDS
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)
#
LDS_TABLE = QueryTable('Information of an observation performed by LOFAR')
LDS_TABLE.add(NAME,             LDSJOINED,'name', 'Name of the observation')  
LDS_TABLE.add(PROJECT,          LDSJOINED,'project', 'Project the observation belongs to')
LDS_TABLE.add(ANTTYPE,          LDSJOINED,'antennaType', 'Type of antennas used for this observation')
LDS_TABLE.add(INITIALUTC,       LDSJOINED,'initialUTC', 'UTC initial time')                         
LDS_TABLE.add(FINALUTC,         LDSJOINED,'finalUTC', 'UTC final time', shown = False)                               
LDS_TABLE.add(INITIALMJD,       LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                        
LDS_TABLE.add(FINALMJD,         LDSJOINED,'finalMJD', 'MJD final time', shown = False)                              
LDS_TABLE.add(LDSDURATION,      LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ')
LDS_TABLE.add(LDSNUMBEAMS,      LDSJOINED,'#Beams', 'Number of beams')                                   
LDS_TABLE.add(LDSMAINFIELD,     LDSJOINED,'mainField', 'Main pointed field name')                     
LDS_TABLE.add(LDSFIELDS,        LDSJOINED,'fields', 'Pointed fields names', shown = False, filterable = False)                            
LDS_TABLE.add(LDSNUMSTATIONS,   LDSJOINED,'#Stations', 'Number of observing stations')
LDS_TABLE.add(LDSNUMSB,         LDSJOINED,'#SBs', 'Number of SubBands (different subBand indexes)')         
LDS_TABLE.add(LDSNUMMSP,        LDSJOINED,'#MSPs', 'Number of related MSPs')                               
LDS_TABLE.add(LDSTOTALSIZE,     LDSJOINED,'size[MB]', 'Total size of all the data related to the observation')
LDS_TABLE.add(LDSMINCENTFREQ,   LDSJOINED,'minFreq[MHz]', 'minimum frequency of the MSs of this observation', formatMethod = formatDouble)
LDS_TABLE.add(LDSMAXCENTFREQ,   LDSJOINED,'maxFreq[MHz]', 'maximum frequency of the MSs of this observation', formatMethod = formatDouble) 
LDS_TABLE.add(LDSHASGAIN,       LDSJOINED,'hasGain', 'Indicate if some of the MSs of the observation has Gain diagnostic data')                
LDS_TABLE.add(LDSHASQUALITY,    LDSJOINED,'hasQuality', 'Indicate if some of the MSs of the observation has Quality diagnostic data')       
LDS_TABLE.add(LDSHASGAINMOVIE,  LDSJOINED,'hasGainMovie', 'Indicate if there is some GAIN movie related to this observation')  
LDS_TABLE.setDefaultOrder([INITIALMJD,])   
#                                                                                                                                                              
# LDSB  
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                      
#                                                                                                                                                              
LDSB_TABLE = QueryTable('For multiple beam observation there will be a different entry for each beam')                                          
LDSB_TABLE.add(LDSB+ID,             LDSBJOINED,'LDSBId', 'Identifier of the LDSB')                                                                    
LDSB_TABLE.add(LDS,                 LDSBJOINED,'LDS', 'Related LDS entry')                                                                          
LDSB_TABLE.add(PROJECT,             LDSJOINED,'project', 'Project the observation belongs to')                                                  
LDSB_TABLE.add(ANTTYPE,             LDSJOINED,'antennaType', 'Type of antennas used in this observation',shown = False)                                        
LDSB_TABLE.add(INITIALUTC,          LDSJOINED,'initialUTC', 'UTC initial time', shown = False)                                                               
LDSB_TABLE.add(FINALUTC,            LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                     
LDSB_TABLE.add(INITIALMJD,          LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                                                               
LDSB_TABLE.add(FINALMJD,            LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                     
LDSB_TABLE.add(LDSDURATION,         LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                
LDSB_TABLE.add(BEAMINDEX,           LDSBJOINED,'beamIndex', 'Beam index')                                                                       
LDSB_TABLE.add(FIELD,               LDSBJOINED,'field', 'Pointed field name')                                                                       
LDSB_TABLE.add(PHASEDIRRA,          LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field', formatMethod = formatDouble)               
LDSB_TABLE.add(PHASEDIRDEC,         LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', formatMethod = formatDouble)                
LDSB_TABLE.add(LDSBNUMLDSBP,        LDSBJOINED,'#LDSBP', 'Number of related LDSBPs')                                                         
LDSB_TABLE.add(LDSBNUMSB,           LDSBJOINED,'#SBs', 'Number of SubBands (different subBand indexes)')                                        
LDSB_TABLE.add(LDSBNUMMSP,          LDSBJOINED,'#MSPs', 'Number of related MSPs (Files)')                                                       
LDSB_TABLE.add(LDSBTOTALSIZE,       LDSBJOINED,'size[MB]', 'Total size of all the data related to this beam of the observation')            
LDSB_TABLE.add(LDSBMINCENTFREQ,     LDSBJOINED,'minFreq[MHz]', 'Minimum frequency of the MSs of the LDSB', formatMethod = formatDouble)   
LDSB_TABLE.add(LDSBMAXCENTFREQ,     LDSBJOINED,'maxFreq[MHz]',  'Maximum frequency of the MSs of the LDSB', formatMethod = formatDouble)  
LDSB_TABLE.add(LDSBHASGAIN,         LDSBJOINED,'hasGain', 'Indicate if some of the MSs of the LDSB has Gain diagnostic data')                 
LDSB_TABLE.add(LDSBHASQUALITY,      LDSBJOINED,'hasQuality', 'Indicate if some of the MSs of the LDSB has Quality diagnostic data')        
LDSB_TABLE.add(LDSBHASGAINMOVIE,    LDSBJOINED,'hasGainMovie', 'Indicate if there is some GAIN movie related to this beam of the observation')
LDSB_TABLE.setDefaultOrder([INITIALMJD, BEAMINDEX])
#                                                                                                                                                                
# LDSBP 
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                         
#                                                                                                                                                                
LDSBP_TABLE = QueryTable('This refers to some actual data related to an entry in the LDSB table. For the same LDSB it is possible to have different LDSBP for example with different averaging specifications')
LDSBP_TABLE.add(LDSBP+ID,               LDSBPJOINED,'LDSBPId', 'Identifier of the LDSBP')                                                                                                                              
LDSBP_TABLE.add(LDSB+ID,                LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB')                                                                                                                        
LDSBP_TABLE.add(LDS,                    LDSBJOINED,'LDS', 'Related LDS entry')                                                                                                                                        
LDSBP_TABLE.add(PROJECT,                LDSJOINED,'project', 'Project the observation belongs to')                                                                                                                 
LDSBP_TABLE.add(ANTTYPE,                LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)                                                                                                      
LDSBP_TABLE.add(INITIALUTC,             LDSJOINED,'initialUTC', 'UTC initial time', shown = False)                                                                                                                              
LDSBP_TABLE.add(FINALUTC,               LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                                                                                    
LDSBP_TABLE.add(INITIALMJD,             LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                                                                                                                              
LDSBP_TABLE.add(FINALMJD,               LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                                                                                    
LDSBP_TABLE.add(LDSDURATION,            LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                                                                               
LDSBP_TABLE.add(BEAMINDEX,              LDSBJOINED,'beamIndex', 'Beam index')                                                                                                                                     
LDSBP_TABLE.add(NUMCHAN,                LDSBPJOINED,'numChan', 'Number of channels')                                                                                                                                 
LDSBP_TABLE.add(INTTIME,                LDSBPJOINED,'intTime', 'Integration time', formatMethod = formatDouble)                                                                                                      
LDSBP_TABLE.add(FIELD,                  LDSBJOINED,'field', 'Pointed field name')                                                                                                                                     
LDSBP_TABLE.add(PHASEDIRRA,             LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble)                                                                            
LDSBP_TABLE.add(PHASEDIRDEC,            LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble)                                                                             
LDSBP_TABLE.add(STORE,                  LDSBPJOINED,'Store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR )                                                                                                                  
LDSBP_TABLE.add(DESCR,                  LDSBPJOINED,'description', 'Short description, normally number channels and integration time', filterable = False)                                                                                
LDSBP_TABLE.add(MAINUSER,               LDSBPJOINED,'mainUser', 'Main user of this data (owner)')                                                                                                                           
LDSBP_TABLE.add(VERSION,                LDSBPJOINED,'version', 'Version string, default version is 0, this is extracted from the path to the files')                                                                 
LDSBP_TABLE.add(RAW,                    LDSBPJOINED,'raw', 'Raw data? i.e. has been averaged by NDPPP')                                                                                                                  
LDSBP_TABLE.add(TAR,                    LDSBPJOINED,'tar', 'Tar files?')                                                                                                                                                 
LDSBP_TABLE.add(BVF,                    LDSBPJOINED,'bvf', 'BVF files?')                                                                                                                                                 
LDSBP_TABLE.add(LDSBPNUMMSP,            LDSBPJOINED,'#MSPs', 'Number of related MSPs (Files)')                                                                                                                   
LDSBP_TABLE.add(LDSBPTOTALSIZE,         LDSBPJOINED,'size[MB]', 'Total size of all the data related to this LDSBP')                                                                                           
LDSBP_TABLE.add(LDSBPLASTMODIFICATION,  LDSBPJOINED,'lastMod', 'Last modification date of the involved files', formatMethod = formatTimeStamp)                                                         
LDSBP_TABLE.add(LDSBPMINCENTFREQ,       LDSBPJOINED,'minFreq[MHz]', 'Minimum frequency of the MSs of this LDSBP', formatMethod = formatDouble)                                                              
LDSBP_TABLE.add(LDSBPMAXCENTFREQ,       LDSBPJOINED,'maxFreq[MHz]',  'Maximum frequency of the MSs of this LDSBP', formatMethod = formatDouble)                                                             
LDSBP_TABLE.add(LDSBPHASGAIN,           LDSBPJOINED,'hasGain', 'Indicate if some of the MSs of the LDSBP has Gain diagnostic data')                                                                             
LDSBP_TABLE.add(LDSBPHASQUALITY,        LDSBPJOINED,'hasQuality', 'Indicate if some of the MSs of the LDSBP has Quality diagnostic data')                                                                    
LDSBP_TABLE.add(FLAGGED,                LDSBPJOINED,'flag', 'Flagged?')                                                                                                                                              
LDSBP_TABLE.add(AVERAGED,               LDSBPJOINED,'averaged', 'Averaged?')                                                                                                                                        
LDSBP_TABLE.add(CALIBRATED,             LDSBPJOINED,'cal', 'Calibrated?')                                                                                                                                         
LDSBP_TABLE.add(DIRDEPCAL,              LDSBPJOINED,'dirDepCal', 'Direction dependent calibrated?')                                                                                                                
LDSBP_TABLE.add(DIRINDEPCAL,            LDSBPJOINED,'dirIndepCal', 'Direction independent calibrated?')                                                                                                            
LDSBP_TABLE.add(LDSBPHASGAINMOVIE,      LDSBPJOINED,'hasGainMovie', 'Indicate if there is some GAIN movie related to this LDSBP')
LDSBP_TABLE.setDefaultOrder([INITIALMJD, VERSION, STORE, BEAMINDEX])                                                                            
#                                                                                                                                                                                                                             
# MS 
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                                                                                         
#                                                                                                                                                                                                                             
MS_TABLE = QueryTable('This refers to frequency information of each one of the measurement sets of a LDSBP. This table has the direct references to the diagnostic data')                                      
MS_TABLE.add(MS+ID,             MSJOINED,'MSId', 'Identifier of the MS')                                                                                                                                           
MS_TABLE.add(LDS,               LDSBJOINED,'LDS', 'Related LDS entry')                                                                                                                                            
MS_TABLE.add(PROJECT,           LDSJOINED,'project', 'Project the observation belongs to', shown = False)                                                                                                                   
MS_TABLE.add(ANTTYPE,           LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)                                                                                                         
MS_TABLE.add(INITIALUTC,        LDSJOINED,'initialUTC', 'UTC initial time', shown = False)                                                                                                                                 
MS_TABLE.add(FINALUTC,          LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                                                                                       
MS_TABLE.add(INITIALMJD,        LDSJOINED,'initialMJD', 'MJD initial time',shown = False)                                                                                                                                 
MS_TABLE.add(FINALMJD,          LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                                                                                       
MS_TABLE.add(LDSDURATION,       LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                                                                                  
MS_TABLE.add(LDSBP+ID,          MSJOINED,'LDSBPId', 'Identifier of the LDSBP')                                                                                                                                  
MS_TABLE.add(LDSB+ID,           LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)                                                                                                                           
MS_TABLE.add(BEAMINDEX,         LDSBJOINED,'beamIndex', 'Beam index')                                                                                                                                        
MS_TABLE.add(NUMCHAN,           LDSBPJOINED,'numChan', 'Number of channels', shown = False)                                                                                                                                  
MS_TABLE.add(INTTIME,           LDSBPJOINED,'intTime', 'Integration time', shown = False, formatMethod = formatDouble)                                                                                                       
MS_TABLE.add(FIELD,             LDSBJOINED,'field', 'Pointed field name', shown = False)                                                                                                                                       
MS_TABLE.add(PHASEDIRRA,        LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble)                                                                              
MS_TABLE.add(PHASEDIRDEC,       LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble)                                                                               
MS_TABLE.add(STORE,             LDSBPJOINED,'store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)                                                                                                                   
MS_TABLE.add(SBINDEX,           MSJOINED,'sbIndex', 'SubBand index')                                                                                                                                            
MS_TABLE.add(CENTFREQ,          MSJOINED,'centFreq', 'Central frequency [MHz]', formatMethod = formatDouble)                                                                                                   
MS_TABLE.add(BW,                MSJOINED,'bandwidth',  'Bandwidth [MHz]', formatMethod = formatDouble)                                                                                                                      
MS_TABLE.add(RAW,               LDSBPJOINED,'raw', 'Raw data? i.e. has been not averaged by NDPPP')                                                                                                                
MS_TABLE.add(TAR,               LDSBPJOINED,'tar', 'Tar files?')                                                                                                                                                   
MS_TABLE.add(BVF,               LDSBPJOINED,'bvf', 'BVF files?')                                                                                                                                                   
MS_TABLE.add(MSHASMSP,          MSJOINED,'hasMSP', 'Indicate if there is any MSP related to this MS, i.e. any measurementset file/folder')                                                                     
MS_TABLE.add(MSHASGAIN,         MSJOINED,'hasGain', 'Indicate if it has Gain diagnostic data')                                                                                                                
MS_TABLE.add(MSHASQUALITY,      MSJOINED,'hasQuality', 'Indicate if it has Quality diagnostic data')                                                                                                       
MS_TABLE.add(MSHASGAINMOVIE,    MSJOINED,'hasGainMovie', 'Indicate if there is some GAIN movie related to this MS')                                                                                        
MS_TABLE.add(FLAGGED,           LDSBPJOINED,'flag', 'Flagged?', shown = False)                                                                                                                                               
MS_TABLE.add(AVERAGED,          LDSBPJOINED,'averaged', 'Averaged?', shown = False)                                                                                                                                         
MS_TABLE.add(CALIBRATED,        LDSBPJOINED,'cal', 'Calibrated?',shown = False)                                                                                                                                           
MS_TABLE.add(DIRDEPCAL,         LDSBPJOINED,'dirDepCal', 'Direction dependent calibrated?', shown = False)                                                                                                                 
MS_TABLE.add(DIRINDEPCAL,       LDSBPJOINED,'dirIndepCal', 'Direction independent calibrated?',shown = False)
MS_TABLE.setDefaultOrder([SBINDEX,])                                                                                                             
#                                                                                                                                                                                                                             
# MSP  
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                                                                                       
#                                                                                                                                                                                                                             
MSP_TABLE = QueryTable('This is the location of a measurement set data, which is related to an entry in MS table. The difference between MS and MSP is that if we delete the measurement set data, the entry in the MSO should be deleted but not the one in MS (we still want to know that the data existed)')                                                                                                                                                            
MSP_TABLE.add(MSP+ID,           MSP,'MSPId', 'Identifier of the MSP')                                                                                                                                                            
MSP_TABLE.add(MS+ID,            MSP,'MSId', 'Identifier of the MS')                                                                                                                                                         
MSP_TABLE.add(LDS,              LDSBJOINED,'LDS', 'Related LDS entry')                                                                                                                                                          
MSP_TABLE.add(PROJECT,          LDSJOINED,'project', 'Project the observation belongs to', shown = False)                                                                                                                                 
MSP_TABLE.add(ANTTYPE,          LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)                                                                                                                       
MSP_TABLE.add(INITIALUTC,       LDSJOINED,'initialUTC', 'UTC initial time', shown = False)                                                                                                                                               
MSP_TABLE.add(FINALUTC,         LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                                                                                                     
MSP_TABLE.add(INITIALMJD,       LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                                                                                                                                               
MSP_TABLE.add(FINALMJD,         LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                                                                                                     
MSP_TABLE.add(LDSDURATION,      LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                                                                                                
MSP_TABLE.add(LDSBP+ID,         MSJOINED,'LDSBPId', 'Identifier of the LDSBP')                                                                                                                                                
MSP_TABLE.add(LDSB+ID,          LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)                                                                                                                                         
MSP_TABLE.add(BEAMINDEX,        LDSBJOINED,'beamIndex', 'Beam index')                                                                                                                                                      
MSP_TABLE.add(NUMCHAN,          LDSBPJOINED,'numChan', 'Number of channels', shown = False)                                                                                                                                                
MSP_TABLE.add(INTTIME,          LDSBPJOINED,'intTime', 'Integration time', shown = False,  formatMethod = formatDouble)                                                                                                                     
MSP_TABLE.add(FIELD,            LDSBJOINED,'field', 'Pointed field name',shown = False)                                                                                                                                                     
MSP_TABLE.add(PHASEDIRRA,       LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble)                                                                                            
MSP_TABLE.add(PHASEDIRDEC,      LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble)                                                                                             
MSP_TABLE.add(STORE,            LDSBPJOINED,'store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)                                                                                                                                 
MSP_TABLE.add(SBINDEX,          MSJOINED,'sbIndex', 'SubBand index')                                                                                                                                                         
MSP_TABLE.add(CENTFREQ,         MSJOINED,'centFreq', 'Central frequency [MHz]', formatMethod = formatDouble)                                                                                                                
MSP_TABLE.add(BW,               MSJOINED,'bandwidth',  'Bandwidth [MHz]', formatMethod = formatDouble)                                                                                                                                   
MSP_TABLE.add(RAW,              LDSBPJOINED,'raw', 'Raw data? i.e. has been not averaged by NDPPP')                                                                                                                              
MSP_TABLE.add(TAR,              LDSBPJOINED,'tar', 'Tar files?')                                                                                                                                                                 
MSP_TABLE.add(BVF,              LDSBPJOINED,'bvf', 'BVF files?')                                                                                                                                                                 
MSP_TABLE.add(MSHASGAIN,        MSJOINED,'hasGain', 'Indicate if it has Gain diagnostic data')                                                                                                                             
MSP_TABLE.add(MSHASQUALITY,     MSJOINED,'hasQuality', 'Indicate if it has Quality diagnostic data')                                                                                                                    
MSP_TABLE.add(HOST,             MSP,'host', 'Host containing the data')                                                                                                                                                         
MSP_TABLE.add(PARENTPATH,       MSP,'path', 'Path to the parent folder containing the data')                                                                                                                               
MSP_TABLE.add(NAME,             MSP,'name', 'Name of the measurementset, the absolute path to the data is path+name')                                                                                                           
MSP_TABLE.add(SIZE,             MSP,'size[MB]', 'Size of the measurement set (this may include the diagnostic data)')                                                                                                             
MSP_TABLE.add(LASTMODIFICATION, MSP,'lastMod', 'Last modification date', formatMethod = formatTimeStamp)                                                                                                             
MSP_TABLE.add(LASTCHECK,        MSP,'lastCheck', 'Last check date', shown = False, formatMethod = formatTimeStamp)
MSP_TABLE.setDefaultOrder([SBINDEX,STORE])                                                                                                                        
#                                                                                                                                                                                                                                            
# GAIN  
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                                                                                                     
#                                                                                                                                                                                                                                            
GAIN_TABLE = QueryTable('Gain solutions of the stations. A row contains the gain solutions for certain MS, station and direction. The values stored here are a four dimensional matrix. The dimensions are polarization, frequency channel, time and complex coordinate')                                                                                                                                                                                                  
GAIN_TABLE.add(GAIN+ID,     GAIN,'gainId', 'Identifier of the Gain',inForValue = True)                                                                                                                                     
GAIN_TABLE.add(MS+ID,       GAIN,'MSId', 'Identifier of the MS',shown = False)                                                                                                                                                       
GAIN_TABLE.add(LDS,         LDSBJOINED,'LDS', 'Related LDS entry', inForValue = True)                                                                                                                                      
GAIN_TABLE.add(PROJECT,     LDSJOINED,'project', 'Project the observation belongs to', shown = False)                                                                                                                                
GAIN_TABLE.add(ANTTYPE,     LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)                                                                                                                      
GAIN_TABLE.add(INITIALUTC,  LDSJOINED,'initialUTC', 'UTC initial time', shown = False, inForValue = True)                                                                                                                           
GAIN_TABLE.add(FINALUTC,    LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                                                                                                   
GAIN_TABLE.add(INITIALMJD,  LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                                                                                                                                              
GAIN_TABLE.add(FINALMJD,    LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                                                                                                    
GAIN_TABLE.add(LDSDURATION, LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                                                                                               
GAIN_TABLE.add(LDSBP+ID,    MSJOINED,'LDSBPId', 'Identifier of the LDSBP')                                                                                                                                               
GAIN_TABLE.add(LDSB+ID,     LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)                                                                                                                                        
GAIN_TABLE.add(BEAMINDEX,   LDSBJOINED,'beamIndex', 'Beam index', shown = False)                                                                                                                                                    
GAIN_TABLE.add(NUMCHAN,     LDSBPJOINED,'numChan', 'Number of channels', shown = False)                                                                                                                                               
GAIN_TABLE.add(INTTIME,     LDSBPJOINED,'intTime', 'Integration time', shown = False, formatMethod = formatDouble)                                                                                                                    
GAIN_TABLE.add(FIELD,       LDSBJOINED,'field', 'Pointed field name',shown = False)                                                                                                                                                    
GAIN_TABLE.add(PHASEDIRRA,  LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble, inForValue = True)                                                                        
GAIN_TABLE.add(PHASEDIRDEC, LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble, inForValue = True)                                                                         
GAIN_TABLE.add(STORE,       LDSBPJOINED,'Store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)                                                                                                                                
GAIN_TABLE.add(SBINDEX,     MSJOINED,'sbIndex', 'SubBand index', inForValue = True)                                                                                                                                     
GAIN_TABLE.add(CENTFREQ,    MSJOINED,'centFreq', 'Central frequency [MHz]', formatMethod = formatDouble, inForValue = True)                                                                                            
GAIN_TABLE.add(BW,          MSJOINED,'bandwidth',  'Bandwidth [MHz]',formatMethod = formatDouble, inForValue = True)                                                                                                               
GAIN_TABLE.add(STATION,     GAIN,'station', 'Station name', inForValue = True)                                                                                                                                          
GAIN_TABLE.add(DIRRA,       GAIN,'dirRA', 'Right Ascension direction (only for direction dependent calibration, otherwise -1)', formatMethod = formatDouble, inForValue = True)                                            
GAIN_TABLE.add(DIRDEC,      GAIN,'dirDec', 'Declination direction (only for direction dependent calibration, otherwise -1)', formatMethod = formatDouble, inForValue = True)                                              
GAIN_TABLE.add(FSTEP,       GAIN,'freqStep', 'Frequency step [Hz]', formatMethod = formatDouble, inForValue = True)                                                                                                        
GAIN_TABLE.add(TSTEP,       GAIN,'timeStep', 'Time step', formatMethod = formatDouble, inForValue = True)                                                                                                                  
GAIN_TABLE.add(LASTCHECK,   GAIN,'lastCheck', 'Last check date', shown = False, formatMethod = formatTimeStamp)                                                                                                                      
GAIN_TABLE.add(VALUES,      GAIN,'values', 'Values', shown = False, filterable=False, inForValue = True)
GAIN_TABLE.setDefaultOrder([INITIALMJD ,SBINDEX])                                                                                                                                                
#                                                                                                                                                                                                                                            
# QTS  
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                                                                                                      
#                                                                                                                                                                                                                                            
QTS_TABLE = QueryTable('Time-based statistic parameters extracted and reformatted from the quality statistic sub-table of each measurement set. A row contains quality time statistic for a certain MS and quality kind. The values stored here are a four dimensional matrix. The dimensions are polarization, frequency channel, time and complex coordinate')                                                                                                           
QTS_TABLE.add(QTSTAT+ID,    QTSTAT,'QTSId', 'Identifier of the QTS', inForValue = True)                                                                                                                                      
QTS_TABLE.add(MS+ID,        QTSTAT,'MSId', 'Identifier of the MS', shown = False)                                                                                                                                                        
QTS_TABLE.add(LDS,          LDSBJOINED,'LDS', 'Related LDS entry', inForValue = True)                                                                                                                                       
QTS_TABLE.add(PROJECT,      LDSJOINED,'project', 'Project the observation belongs to', shown = False)                                                                                                                                 
QTS_TABLE.add(ANTTYPE,      LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)                                                                                                                       
QTS_TABLE.add(INITIALUTC,   LDSJOINED,'initialUTC', 'UTC initial time', shown = False, inForValue = True)                                                                                                                            
QTS_TABLE.add(FINALUTC,     LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                                                                                                     
QTS_TABLE.add(INITIALMJD,   LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                                                                                                                                               
QTS_TABLE.add(FINALMJD,     LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                                                                                                     
QTS_TABLE.add(LDSDURATION,  LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                                                                                                
QTS_TABLE.add(LDSBP+ID,     MSJOINED,'LDSBPId', 'Identifier of the LDSBP')                                                                                                                                                
QTS_TABLE.add(LDSB+ID,      LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)                                                                                                                                         
QTS_TABLE.add(BEAMINDEX,    LDSBJOINED,'beamIndex', 'Beam index', shown = False)                                                                                                                                                     
QTS_TABLE.add(NUMCHAN,      LDSBPJOINED,'numChan', 'Number of channels',shown =  False)                                                                                                                                                
QTS_TABLE.add(INTTIME,      LDSBPJOINED,'intTime', 'Integration time', shown = False, formatMethod = formatDouble)                                                                                                                     
QTS_TABLE.add(FIELD,        LDSBJOINED,'field', 'Pointed field name',shown = False)                                                                                                                                                     
QTS_TABLE.add(PHASEDIRRA,   LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble, inForValue = True)                                                                         
QTS_TABLE.add(PHASEDIRDEC,  LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble, inForValue = True)                                                                          
QTS_TABLE.add(STORE,        LDSBPJOINED,'store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)                                                                                                                                 
QTS_TABLE.add(SBINDEX,      MSJOINED,'sbIndex', 'SubBand index')                                                                                                                                                         
QTS_TABLE.add(CENTFREQ,     MSJOINED,'centFreq', 'Central frequency [MHz]', formatMethod = formatDouble, inForValue = True)                                                                                             
QTS_TABLE.add(BW,           MSJOINED,'bandwidth',  'Bandwidth [MHz]', formatMethod = formatDouble, inForValue = True)                                                                                                                
QTS_TABLE.add(FSTEP,        QTSTAT,'freqStep', 'Frequency step [Hz]', formatMethod = formatDouble, inForValue = True)                                                                                                       
QTS_TABLE.add(TSTEP,        QTSTAT,'timeStep',   'Time step', formatMethod = formatDouble, inForValue = True)                                                                                                               
QTS_TABLE.add(QKIND+ID,     QTSTAT,'qKId', 'Identifier of the Quality Kind', inForValue = True)                                                                                                                               
QTS_TABLE.add(NAME,         QKIND,'qKName', 'Name of the Quality Kind', filterable=False, shown = False, inForValue = True)                                                                                                                               
QTS_TABLE.add(LASTCHECK,    QTSTAT,'lastCheck', 'Last check date', shown = False, formatMethod = formatTimeStamp)                                                                                                                     
QTS_TABLE.add(VALUES,       QTSTAT,'values', 'Values', shown = False, filterable=False, inForValue = True)
QTS_TABLE.setDefaultOrder([INITIALMJD ,SBINDEX])                                                                                                                                               
#                                                                                                                                                                                                                                            
# QFS  
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                                                                                                      
#                                                                                                                                                                                                                                            
QFS_TABLE = QueryTable('Frequency-based statistic parameters extracted and reformatted from the quality statistic sub-table of each measurement set. A row contains quality frequency statistic for a certain MS and quality kind. The values stored here are a three dimensional matrix. The dimensions are polarization, frequency channel and complex coordinate')                                                                                                      
QFS_TABLE.add(QFSTAT+ID,    QFSTAT,'QFSId', 'Identifier of the QFS', inForValue = True)                                                                                                                                      
QFS_TABLE.add(MS+ID,        QFSTAT,'MSId', 'Identifier of the MS', shown = False)                                                                                                                                                        
QFS_TABLE.add(LDS,          LDSBJOINED,'LDS', 'Related LDS entry', inForValue = True)                                                                                                                                       
QFS_TABLE.add(PROJECT,      LDSJOINED,'project', 'Project the observation belongs to', shown = False)                                                                                                                                 
QFS_TABLE.add(ANTTYPE,      LDSJOINED,'antennaType', 'Type of antennas used in this observation',shown =  False)                                                                                                                       
QFS_TABLE.add(INITIALUTC,   LDSJOINED,'initialUTC', 'UTC initial time', shown = False, inForValue = True)                                                                                                                            
QFS_TABLE.add(FINALUTC,     LDSJOINED,'finalUTC', 'UTC final time', shown = False)                                                                                                                                                     
QFS_TABLE.add(INITIALMJD,   LDSJOINED,'initialMJD', 'MJD initial time', shown = False)                                                                                                                                               
QFS_TABLE.add(FINALMJD,     LDSJOINED,'finalMJD', 'MJD final time', shown = False)                                                                                                                                                     
QFS_TABLE.add(LDSDURATION,  LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)                                                                                                                
QFS_TABLE.add(LDSBP+ID,     MSJOINED,'LDSBPId', 'Identifier of the LDSBP')                                                                                                                                                
QFS_TABLE.add(LDSB+ID,      LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)                                                                                                                                         
QFS_TABLE.add(BEAMINDEX,    LDSBJOINED,'beamIndex', 'Beam index', shown = False)                                                                                                                                                     
QFS_TABLE.add(NUMCHAN,      LDSBPJOINED,'numChan', 'Number of channels', shown = False)                                                                                                                                                
QFS_TABLE.add(INTTIME,      LDSBPJOINED,'intTime', 'Integration time', shown = False, formatMethod = formatDouble)                                                                                                                     
QFS_TABLE.add(FIELD,        LDSBJOINED,'field', 'Pointed field name',shown = False)                                                                                                                                                     
QFS_TABLE.add(PHASEDIRRA,   LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble, inForValue = True)                                                                         
QFS_TABLE.add(PHASEDIRDEC,  LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble, inForValue = True)                                                                          
QFS_TABLE.add(STORE,        LDSBPJOINED,'store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)                                                                                                                                 
QFS_TABLE.add(SBINDEX,      MSJOINED,'sbIndex', 'SubBand index')                                                                                                                                                         
QFS_TABLE.add(CENTFREQ,     MSJOINED,'centFreq', 'Central frequency [MHz]', formatMethod = formatDouble, inForValue = True)                                                                                             
QFS_TABLE.add(BW,           MSJOINED,'bandwidth',  'Bandwidth [MHz]', formatMethod = formatDouble, inForValue = True)                                                                                                                
QFS_TABLE.add(FSTEP,        QFSTAT,'freqStep', 'Frequency step [Hz]', formatMethod = formatDouble, inForValue = True)                                                                                                       
QFS_TABLE.add(QKIND+ID,     QFSTAT,'qKId', 'Identifier of the Quality Kind', inForValue = True)                                                                                                                               
QFS_TABLE.add(NAME,         QKIND,'qKName', 'Name of the Quality Kind',  filterable=False, shown = False, inForValue = True)                                                                                                                               
QFS_TABLE.add(LASTCHECK,    QFSTAT,'lastCheck', 'Last check date', shown = False, formatMethod = formatTimeStamp)                                                                                                                     
QFS_TABLE.add(VALUES,       QFSTAT,'values', 'Values', shown = False, filterable=False, inForValue = True)
QFS_TABLE.setDefaultOrder([INITIALMJD ,SBINDEX])                                                                                                                                               
#                                                                                                                                                                                                                                            
# QBS  
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)                                                                                                                                                                                                                                      
#                                                                                                                                                                                                                                            
QBS_TABLE = QueryTable('Baseline-based statistic parameters extracted and reformatted from the quality statistic sub-table of each measurement set. A row contains quality baseline statistic for a certain MS, baseline and quality kind. The values stored here are a three dimensional matrix. The dimensions are polarization, frequency channel and complex coordinate')                                                                                              
QBS_TABLE.add(QBSTAT+ID,    QBSTAT,'QBSId', 'Identifier of the QBS', inForValue = True)                                                                                                                                      
QBS_TABLE.add(MS+ID,        QBSTAT,'MSId', 'Identifier of the MS', shown = False)
QBS_TABLE.add(LDS,          LDSBJOINED,'LDS', 'Related LDS entry', inForValue = True)
QBS_TABLE.add(PROJECT,      LDSJOINED,'project', 'Project the observation belongs to', shown = False)
QBS_TABLE.add(ANTTYPE,      LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)
QBS_TABLE.add(INITIALUTC,   LDSJOINED,'initialUTC', 'UTC initial time', shown = False, inForValue = True)
QBS_TABLE.add(FINALUTC,     LDSJOINED,'finalUTC', 'UTC final time', shown = False)
QBS_TABLE.add(INITIALMJD,   LDSJOINED,'initialMJD', 'MJD initial time', shown = False)
QBS_TABLE.add(FINALMJD,     LDSJOINED,'finalMJD', 'MJD final time', shown = False)
QBS_TABLE.add(LDSDURATION,  LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)
QBS_TABLE.add(LDSBP+ID,     MSJOINED,'LDSBPId', 'Identifier of the LDSBP')
QBS_TABLE.add(LDSB+ID,      LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)
QBS_TABLE.add(BEAMINDEX,    LDSBJOINED,'beamIndex', 'Beam index', shown=False)
QBS_TABLE.add(NUMCHAN,      LDSBPJOINED,'numChan', 'Number of channels', shown = False)
QBS_TABLE.add(INTTIME,      LDSBPJOINED,'intTime', 'Integration time', shown = False, formatMethod = formatDouble)
QBS_TABLE.add(FIELD,        LDSBJOINED,'field', 'Pointed field name',shown = False)
QBS_TABLE.add(PHASEDIRRA,   LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble, inForValue = True)
QBS_TABLE.add(PHASEDIRDEC,  LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble, inForValue = True)
QBS_TABLE.add(STORE,        LDSBPJOINED,'store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)
QBS_TABLE.add(SBINDEX,      MSJOINED,'sbIndex', 'SubBand index')
QBS_TABLE.add(CENTFREQ,     MSJOINED,'centFreq', 'Central frequency [MHz]', formatMethod = formatDouble, inForValue = True)
QBS_TABLE.add(BW,           MSJOINED,'bandwidth',  'Bandwidth [MHz]', formatMethod = formatDouble, inForValue = True)
QBS_TABLE.add(BASELINE+ID,  BASELINE,'baselineID', 'Baseline identifier', shown = False)
QBS_TABLE.add(STATION1,     BASELINE,'station', 'First station forming the baseline',  filterable=False, inForValue = True)
QBS_TABLE.add(STATION2,     BASELINE,'station2', 'Second station forming the baseline',  filterable=False, inForValue = True)
QBS_TABLE.add(FSTEP,        QBSTAT,'freqStep', 'Frequency step [Hz]', formatMethod = formatDouble, inForValue = True)
QBS_TABLE.add(QKIND+ID,     QBSTAT,'qKId', 'Identifier of the Quality Kind', inForValue = True)
QBS_TABLE.add(NAME,         QKIND,'qKName', 'Name of the Quality Kind', filterable=False, shown = False, inForValue = True)
QBS_TABLE.add(LASTCHECK,    QBSTAT,'lastCheck', 'Last check date', shown = False, formatMethod = formatTimeStamp)
QBS_TABLE.add(VALUES,       QBSTAT,'values', 'Values', shown = False, filterable= False, inForValue = True)
QBS_TABLE.setDefaultOrder([INITIALMJD ,SBINDEX])
#
# GAIN MOVIE
# (to add a column we must use the method add(name, table, header, information, shown = True, filterable = True, inForValue = False, formatMethod = None)
#
GAIN_MOVIE_TABLE = QueryTable('This is the location of a Gain movies, which are related to one/more entry/ies in MS table.')
GAIN_MOVIE_TABLE.add(GAINMOVIE+ID,  GAINMOVIE,'gainMovieId', 'Identifier of the Gain Movie')
GAIN_MOVIE_TABLE.add(LDS,           LDSBJOINED,'LDS', 'Related LDS entry')
GAIN_MOVIE_TABLE.add(PROJECT,       LDSJOINED,'project', 'Project the observation belongs to', shown = False)
GAIN_MOVIE_TABLE.add(ANTTYPE,       LDSJOINED,'antennaType', 'Type of antennas used in this observation', shown = False)
GAIN_MOVIE_TABLE.add(INITIALUTC,    LDSJOINED,'initialUTC', 'UTC initial time', shown = False)
GAIN_MOVIE_TABLE.add(FINALUTC,      LDSJOINED,'finalUTC', 'UTC final time', shown = False)
GAIN_MOVIE_TABLE.add(INITIALMJD,    LDSJOINED,'initialMJD', 'MJD initial time', shown = False)
GAIN_MOVIE_TABLE.add(FINALMJD,      LDSJOINED,'finalMJD', 'MJD final time', shown = False)
GAIN_MOVIE_TABLE.add(LDSDURATION,   LDSJOINED,'duration[s]', 'Total duration of the observation in seconds ', shown = False)
GAIN_MOVIE_TABLE.add(LDSBP+ID,      LDSBPJOINED,'LDSBPId', 'Identifier of the LDSBP')
GAIN_MOVIE_TABLE.add(LDSB+ID,       LDSBPJOINED,'LDSBId', 'Identifier of the related LDSB', shown = False)
GAIN_MOVIE_TABLE.add(BEAMINDEX,     LDSBJOINED,'beamIndex', 'Beam index')
GAIN_MOVIE_TABLE.add(NUMCHAN,       LDSBPJOINED,'numChan', 'Number of channels')
GAIN_MOVIE_TABLE.add(INTTIME,       LDSBPJOINED,'intTime', 'Integration time', formatMethod = formatDouble)
GAIN_MOVIE_TABLE.add(FIELD,         LDSBJOINED,'field', 'Pointed field name',shown = False)
GAIN_MOVIE_TABLE.add(PHASEDIRRA,    LDSBJOINED,'phaseDirRA', 'Right Ascension of the pointed field',shown = False, formatMethod = formatDouble)
GAIN_MOVIE_TABLE.add(PHASEDIRDEC,   LDSBJOINED,'phaseDirDec', 'Declination of the pointed field', shown = False, formatMethod = formatDouble)
GAIN_MOVIE_TABLE.add(STORE,         LDSBPJOINED,'store', 'Store or cluster containing the data. Raw data from observatory is stored in ' + TARGET_F_EOR + '. Processed data is archived in ' + TARGET_E_EOR, shown = False)
GAIN_MOVIE_TABLE.add(FILEPATH,      GAINMOVIE,'path', 'Path to the movie')
GAIN_MOVIE_TABLE.add(HOST,          GAINMOVIE,'host', 'Host containing the movie')
GAIN_MOVIE_TABLE.add(SIZE,          GAINMOVIE,'size[MB]', 'Size of the movie')
GAIN_MOVIE_TABLE.add(XAXIS,         GAINMOVIE,'xaxis', 'X axis of the movie, the animation is in the other dimension')
GAIN_MOVIE_TABLE.add(JONES,         GAINMOVIE,'jones', 'Jones elements', filterable= False)
GAIN_MOVIE_TABLE.add(POLAR,         GAINMOVIE,'polar', 'Polar coordinates?')
GAIN_MOVIE_TABLE.add(REFSTATION,    GAINMOVIE,'refStation', 'Reference station')
GAIN_MOVIE_TABLE.add(TIMES,         GAINMOVIE,'times', 'Times used for the animation [initIndex, endIndex, step]', filterable= False)
GAIN_MOVIE_TABLE.add(CHANNELS,      GAINMOVIE,'channels', 'Channels used for the animation [initIndex, endIndex, step]', filterable= False)
GAIN_MOVIE_TABLE.add(YRANGE,        GAINMOVIE,'yRange', 'Y range', filterable= False)
GAIN_MOVIE_TABLE.add(MESSAGE,       GAINMOVIE,'message', 'Message')
GAIN_MOVIE_TABLE.add(LASTCHECK,     GAINMOVIE,'lastMod', 'Last check date', formatMethod = formatTimeStamp)
GAIN_MOVIE_TABLE.setDefaultOrder([GAINMOVIE+ID,])

#
# LDSHASSTATION (this table is not really queriable but we need it to add stations conditions)
#
LDSHASTATION_TABLE = QueryTable('Information stations used during observations performed by LOFAR')
LDSHASTATION_TABLE.add(STATION,         LDSHASSTATION,'station', 'Station used during observation')
LDSHASTATION_TABLE.add(NUMSELSTATIONS,  LDSHASSTATION,'#SelStations', 'Number of selected stations')